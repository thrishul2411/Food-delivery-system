# Properties served BY the config server TO the order-service

# Port for the order-service (e.g., 8083)
server.port=8083

# --- Database Connection (PostgreSQL - LOCALHOST) ---
# Point to a new 'order_db' database
spring.datasource.url=jdbc:postgresql://localhost:5432/order_db

# Use the same user/password or create a dedicated one
spring.datasource.username=postgres
spring.datasource.password=root

spring.datasource.driver-class-name=org.postgresql.Driver

# --- JPA / Hibernate Configuration ---
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# --- Feign Client Configuration (Optional but good practice) ---
# Configure timeouts for calls made BY this service using Feign
# feign.client.config.default.connectTimeout=5000 # milliseconds
# feign.client.config.default.readTimeout=10000 # milliseconds

# --- Actuator Configuration ---
management.endpoints.web.exposure.include=health,info,prometheus,configprops
management.endpoint.health.show-details=always

# ... (existing properties: server.port, spring.datasource.*, feign.*, management.*) ...

# --- Spring Cloud Stream / RabbitMQ Binder ---
# Connection details for your LOCAL RabbitMQ installation
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

# --- Define Input Binding (How this service RECEIVES messages) ---
# Define a "consumer" function in our code (will be a @Bean) named 'paymentOutcomeConsumer'
#spring.cloud.stream.function.definition=paymentOutcomeConsumer

# Configure the specific input binding named 'paymentOutcomeConsumer-in-0'
# ('-in-0' is added by convention for the first input of a consumer)
# 'destination' is the RabbitMQ Exchange name to subscribe to (MUST match payment-service output destination)
spring.cloud.stream.bindings.paymentOutcomeConsumer-in-0.destination=payment-events

# 'group' defines the Consumer Group. For RabbitMQ, this becomes the durable Queue name
# that binds to the destination exchange. All instances with the same group
# form a competing consumer group (only one instance gets a specific message).
spring.cloud.stream.bindings.paymentOutcomeConsumer-in-0.group=order-service-group

# --- Add/Update Stream Function Definition ---
# Append the new supplier name (use semicolon if others exist)
spring.cloud.stream.function.definition=paymentOutcomeConsumer;orderReadySupplier

# --- Output Binding for Order Ready Event ---
spring.cloud.stream.bindings.orderReadySupplier-out-0.destination=order-events # Exchange name