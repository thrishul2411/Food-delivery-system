# Properties served BY the config server TO the delivery-service

# Port for the delivery-service (e.g., 8086)
server.port=8086

# --- Database Connection (PostgreSQL - LOCALHOST) ---
# Point to a new 'delivery_db' database
spring.datasource.url=jdbc:postgresql://localhost:5432/delivery_db # New DB name
spring.datasource.username=fooduser
spring.datasource.password=foodpassword
spring.datasource.driver-class-name=org.postgresql.Driver

# --- JPA / Hibernate Configuration ---
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.hibernate.naming.physical-strategy=org.hibernate.boot.model.naming.PhysicalNamingStrategyStandardImpl
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.jpa.properties.hibernate.format_sql=true

# --- Redis Configuration (for caching driver locations later) ---
# Assuming default local Redis installation
spring.data.redis.host=localhost
spring.data.redis.port=6379
# spring.data.redis.password= # Add password if your Redis requires one

# --- Actuator Configuration ---
management.endpoints.web.exposure.include=health,info,prometheus,configprops
management.endpoint.health.show-details=always

# --- Spring Cloud Stream / RabbitMQ Binder ---
spring.rabbitmq.host=localhost
spring.rabbitmq.port=5672
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest

# --- Define Stream Bindings ---
# Define functions used for bindings
spring.cloud.stream.function.definition=orderReadyConsumer;driverLocationConsumer;deliveryOutcomeSupplier

# Input Binding: Consume OrderReadyForPickupEvent
spring.cloud.stream.bindings.orderReadyConsumer-in-0.destination=order-events # Exchange name (order-service will publish here)
spring.cloud.stream.bindings.orderReadyConsumer-in-0.group=delivery-service-order-group # Queue name

# Input Binding: Consume DriverLocationUpdatedEvent
spring.cloud.stream.bindings.driverLocationConsumer-in-0.destination=driver-locations # Exchange name (driver-service publishes here)
spring.cloud.stream.bindings.driverLocationConsumer-in-0.group=delivery-service-location-group # Separate queue

# Output Binding: Publish DriverAssigned, OrderPickedUp, OrderDelivered events
spring.cloud.stream.bindings.deliveryOutcomeSupplier-out-0.destination=delivery-events # Exchange name for delivery outcomes